
import streamlit as st

st.set_page_config(page_title="Assistente T√©cnico de Licita√ß√µes", layout="centered")

st.title("üì° Assistente T√©cnico de Licita√ß√µes - Equipamentos de Rede")
st.markdown("Preencha os requisitos t√©cnicos do edital e veja os modelos mais compat√≠veis dispon√≠veis.")

# Requisitos do edital
req_portas = st.number_input("üîå Portas Gigabit", value=48, min_value=0)
req_uplinks = st.number_input("üîó Uplinks SFP+", value=4, min_value=0)
req_poe = st.selectbox("‚ö° Suporte a PoE?", ["Sim", "N√£o"]) == "Sim"
req_stack = st.selectbox("üìö Empilh√°vel (Stack)?", ["Sim", "N√£o"]) == "Sim"
req_snmp = st.selectbox("üì° Gerenciamento SNMP?", ["Sim", "N√£o"]) == "Sim"
req_auth = st.selectbox("üîê Autentica√ß√£o 802.1X?", ["Sim", "N√£o"]) == "Sim"

requisitos = {
    "portas_gigabit": req_portas,
    "uplinks_sfp+": req_uplinks,
    "poe": req_poe,
    "empilhamento": req_stack,
    "snmp": req_snmp,
    "autenticacao_8021x": req_auth
}

# Banco de equipamentos simulados
equipamentos = [
    {
        "fabricante": "Huawei",
        "modelo": "S5735S-L48T4X-A1",
        "portas_gigabit": 48,
        "uplinks_sfp+": 4,
        "poe": False,
        "empilhamento": True,
        "snmp": True,
        "autenticacao_8021x": True,
        "observacoes": "Sem PoE. Indicado para ambientes com alimenta√ß√£o externa."
    },
    {
        "fabricante": "Huawei",
        "modelo": "S5735S-L48P4X-A1",
        "portas_gigabit": 48,
        "uplinks_sfp+": 4,
        "poe": True,
        "empilhamento": True,
        "snmp": True,
        "autenticacao_8021x": True,
        "observacoes": "PoE+ at√© 370W. Ideal para APs e telefones IP."
    },
    {
        "fabricante": "TP-Link",
        "modelo": "T2600G-52TS",
        "portas_gigabit": 48,
        "uplinks_sfp+": 4,
        "poe": False,
        "empilhamento": False,
        "snmp": True,
        "autenticacao_8021x": True,
        "observacoes": "Switch L2+ avan√ßado. Sem PoE, sem empilhamento f√≠sico."
    }
]

# L√≥gica de an√°lise
def analisar(equip, reqs):
    compat, score = [], 0
    for k, v in reqs.items():
        if equip.get(k) == v:
            compat.append(f"‚úÖ {k.replace('_',' ').title()}")
            score += 1
        else:
            compat.append(f"‚ùå {k.replace('_',' ').title()} (esperado: {v}, encontrado: {equip.get(k)})")
    return score, "\n".join(compat)

if st.button("üîç Analisar Equipamentos"):
    resultados = []
    for eq in equipamentos:
        score, compat = analisar(eq, requisitos)
        resultados.append((score, eq["modelo"], eq["fabricante"], compat, eq["observacoes"]))

    resultados.sort(reverse=True, key=lambda x: x[0])

    for score, modelo, fabricante, compat, obs in resultados:
        st.subheader(f"{modelo} ({fabricante})")
        st.text(compat)
        st.markdown(f"**Pontua√ß√£o:** {score} | **Conclus√£o:** {'‚úÖ Compat√≠vel' if score == 6 else '‚ö†Ô∏è Parcialmente compat√≠vel'}")
        st.markdown(f"**Observa√ß√µes:** {obs}")
        st.markdown("---")
